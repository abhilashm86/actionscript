<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   creationComplete="initApp()" viewSourceURL="srcview/index.html">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.example.programmingas3.geometry.MatrixTransformer;
			 
			[Bindable]
			[Embed("../img/Human_eyesight_two_children_and_ball_normal_vision.jpg")]
			private var image1:Class;
			
			public function initApp():void
			{
				resetFields();
				setImageMask();
			}
			/**
			 * Creates a mask that matches the dimensions of the imagePanel, to prevent
			 * the transformed image from covering the rest of the UI.
			 */
			public function setImageMask():void
			{
				// create a rectangluar mask shape
				var maskImage:Shape = new Shape();
				
				maskImage.graphics.beginFill(0x666666);
				maskImage.graphics.drawRect(0, 0, imagePanel.width, imagePanel.height);
				maskImage.graphics.endFill();
				
				// align the mask with the parent imagePanel
				var maskOrigin:Point = maskImage.globalToLocal(imagePanel.localToGlobal(new Point(0,0)));
				maskImage.x = maskOrigin.x;
				maskImage.y = maskOrigin.y;
				
				img.content.mask = maskImage;
			}
			
			/**
			 * Resets all of the input controls.
			 */
			private function resetFields():void 
			{
				xScaleSlider.value = 100;
				yScaleSlider.value = 100;
				dxSlider.value = 0;
				dySlider.value = 0;
				rotationSlider.value = 0;
				skewSlider.value = 0;
			}
			
			/**
			 * Resets the matrix transformation of the display object, 
			 * and then resets the text input fields.
			 */
			
			private function resetTransform():void {
				img.content.transform.matrix = new Matrix();
				resetFields();
			}
			
			/**
			 * Transforms the matrix and then applies the matrix to the image.
			 *
			 * Runs the same transformation matrix through successive transformations and then applies
			 * the matrix to the image at the very end, which is more efficient than applying after
			 * each individual transformation.
			 */
			private function transformDisplayObject():void 
			{
				var tempMatrix:Matrix = img.content.transform.matrix;
				
				// defines the skew type code
				var skewSide:String = new String;
				/* if (skewRight.selected) 
				{
					skewSide = "right"; 
				} 
				else 
				{
					skewSide = "bottom";
				} */
				skewSide = "right"; 
				tempMatrix = MatrixTransformer.transform(tempMatrix, 
					xScaleSlider.value, 
					yScaleSlider.value,
					dxSlider.value, 
					dySlider.value,
					rotationSlider.value,
					skewSlider.value, 
					skewSide );
				
				img.content.transform.matrix = tempMatrix;
				
				
				//resetFields();
			}
		]]>
	</fx:Script>
	
	
	<mx:HBox width="100%" height="100%">
		
		<mx:Panel width="350" height="450" >
			
			<mx:Form width="100%" height="100%">
				<mx:FormItem label="Scale X (%):" horizontalGap="0">
					<mx:HSlider id="xScaleSlider" width="170" minimum="0" maximum="200" 
								tickInterval="20" snapInterval="1" labels="[0,100,200]"
								change="{transformDisplayObject()}"/>
				</mx:FormItem>
				
				<mx:FormItem label= "Scale Y (%):">
					<mx:HSlider id="yScaleSlider" width="170" minimum="0" maximum="200" 
								tickInterval="20" snapInterval="1" labels="[0,100,200]"
								change="{transformDisplayObject()}"/>
				</mx:FormItem>
				
				<mx:FormItem label="Move X (Pixels):">
					<mx:HSlider id="dxSlider" width="170" minimum="-100" maximum="100" 
								tickInterval="20" snapInterval="1" labels="[-100, 0, 100]"
								change="{transformDisplayObject()}"/>
				</mx:FormItem>
				
				<mx:FormItem label="Move Y (Pixels)">
					<mx:HSlider id="dySlider" width="170" minimum="-100" maximum="100" 
								tickInterval="20" snapInterval="1" labels="[-100, 0, 100]"
								change="{transformDisplayObject()}"/>
				</mx:FormItem>
				
				<mx:FormItem label="Rotate (°):">
					<mx:HSlider id="rotationSlider" width="170" minimum="-360" maximum="360" 
								tickInterval="90" snapInterval="1" labels="[-360, 0, 360]"
								change="{transformDisplayObject()}"/>
				</mx:FormItem>	
				
				<mx:FormItem label="Skew Mode:" visible="true">
					
					<mx:RadioButtonGroup id="skewMode"/>
					
					<mx:RadioButton groupName="skewMode" 
									id="skewRight" 
									value="skewRight" 
									label="Slide right-hand side down" 
									width="170" 
									selected="true" 
									visible="false"/>
					
					<mx:RadioButton groupName="skewMode" 
									id="skewBottom" 
									value="skewBottom" 
									label="Slide bottom side to right" 
									width="170" 
									visible="false"/>                           
				</mx:FormItem>
				
				<mx:FormItem label="Skew angle (°):" visible="true">
					<mx:HSlider id="skewSlider" width="170" minimum="-90" maximum="90" 
								tickInterval="10" snapInterval="1" labels="[-90,0,90]" visible="true"
								change="{transformDisplayObject()}"/>
				</mx:FormItem>
				 
			</mx:Form>
			
			<mx:ControlBar width="100%" horizontalAlign="center">
				<mx:Button label="Transform" click="transformDisplayObject()"  />
				<mx:Button label="Reset" click="resetTransform()" />
			</mx:ControlBar>
			
		</mx:Panel>
		
		<mx:Panel id="imagePanel"
				  height="100%"
				  width="100%" 
				  horizontalAlign="center"
				  verticalAlign="middle"
				  title="Training Scene">
			
			<mx:Image id="img" scaleContent="true" source="{image1}"  autoLoad="true"/>			    
			
		</mx:Panel>
		
	</mx:HBox>
</s:Application>
