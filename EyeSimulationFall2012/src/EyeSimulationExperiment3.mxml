<?xml version="1.0" encoding="utf-8"?>
<!--
tranformations on following factors 
1) two images - 1a)circle, 1b)square
2) axis - 2a) x, 2b) y , 2c) xy
3) 6 scale values - 0.25, 0.5, 0.75, 1.5, 2, 2.5

changes needs to be done:
scale ratios of x and y should be different 
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   creationComplete="application1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import flash.filters.BitmapFilterQuality;
			import flash.filters.BlurFilter;
			import flash.filters.ColorMatrixFilter;
			import flash.utils.getTimer;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.SliderEvent;
			import mx.graphics.codec.JPEGEncoder;
			
			private var byteArr2:ByteArray;
			
			private var _degreeRange:int = 180;
			private var matrix:Matrix3D = new Matrix3D();
			public var imageInvert:Matrix3D;
			/*filename parameters
			fr - saving square.txt
			fr1 - saving circle.txt
			*/
			private var fr:FileReference;
			private var fr1:FileReference;
			
			//To show next image 
			private var countImage:int = 1;
			
			/*
			String text : Format it according to needs with \r\n 
			To store recorded values from transformations
			*/
			private var textValuesCircle:String = new String();
			private var textValuesSquare:String = new String();
			
			public var task:String = new String();
			public var distortionType:String = new String();
			public var pictureID:String = new String();
			public var distortionMatrix:String = new String();
			public var flowID:String = new String();
			public var distortionCorrection:String = new String();
			public var timeTaken:Number = new Number();
			public var currentTime:int = new int();
			public var bmp210:Bitmap = new Bitmap();
			
			/*
			Recognise the image - yes or no 
			*/
			public var recognisePreCorrection:String = "";
			public var recognisePostCorrection:String = "";
			public var clickCount:int = 0;
			
			
			/*
			Setting scale factor for either X, Y or XY 
			*/
			public var scaleFactorX:int =1;
			public var scaleFactorY:int =1;
			public var scaleFactorXY:int =1;
			
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				currentState = "welcomeState"; 
				
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.currentState = "experimentState";
				// First line of text in the txt file
				textValuesCircle = "Experiment 3 values - Simulating Prosthetic Vision with Distortions for Retinal Prosthesis Design" + "\r\n\r\n";
				textValuesCircle = textValuesCircle + "Name of Person: " + namePerson.text + "\r\n\r\n";
				
				textValuesSquare = "Experiment 3 values - Simulating Prosthetic Vision with Distortions for Retinal Prosthesis Design" + "\r\n\r\n";
				textValuesSquare = 	textValuesSquare + "Name of Person: " + namePerson.text + "\r\n\r\n";  
				// possible combinations are 35 without flow id
				
				currentTime = getTimer();
				initProcessing();
			}
			
			private function invertImage():void {
				
				imageInvert =  panel.transform.matrix3D;
				
			}
			
			
			
			private function onSaveClick():void
			{
				/*
				To save the recorded values to a text file
				*/
				
				//create the FileReference instance
				fr = new FileReference();
				
				//listen for the file has been saved
				//	fr.addEventListener(Event.COMPLETE, onFileSave);
				
				//listen for when then cancel out of the save dialog
				//fr.addEventListener(Event.CANCEL,onCancel);
				
				//listen for any errors that occur while writing the file
				//fr.addEventListener(IOErrorEvent.IO_ERROR, onSaveError);
				
				//open a native save file dialog, using the default file name
				
				var tempString:String;
				
				var data:BitmapData = new BitmapData(panel.width, panel.height, false, 0xFFFFFF);
				data.draw(panel);
				
				var encod:JPEGEncoder = new JPEGEncoder(100);               
				byteArr2 = encod.encode(data);
				
				//tempString = "abhi \t ram \r\n \nsita";
				
				//fr.save(textValuesCircle, namePerson.text+ '-circle'+ '.txt');
				fr.save(byteArr2, "square.jpg");
				
				
			}
			
			protected function onSaveClick2():void
			{
				//to save square corrected values
				fr1 = new FileReference();
				fr1.save(textValuesSquare, namePerson.text+ '-square'+'.txt');
			}
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				/*
				Recognised the image
				*/
				clickCount ++;
				if(clickCount == 1)
				{ 
					recognisePreCorrection = "yes";	
				}
				else 
					recognisePostCorrection = "yes";
				
			}
			
			
			protected function button4_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				clickCount ++;
				if(clickCount == 1)
				{
					recognisePreCorrection = "no";
				}
				else
					recognisePostCorrection = "no";	
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(countImage == 36)
				{
					Alert.show("End of experiment, thanks for participating " +namePerson.text + "!!");
				}
				/*
				check whether yes or no has been clicked
				*/
				if(recognisePostCorrection != ""  || recognisePreCorrection != "")
				{
					countImage = countImage + 1;
					/*
					initiaalise back all sliders.
					
					*/
					clickCount = 0;
					/*
					1) write all slider values to text file
					2) Write all martix value 
					*/
					timeTaken = (getTimer() - currentTime)/ 1000.0000 ;
					
					distortionCorrection = "a = " + panel.transform.matrix.a + '\r\n' + 
						"b = " + panel.transform.matrix.b + '\r\n' + "c= " + panel.transform.matrix.c +'\r\n' +"d =" +panel.transform.matrix.d +'\r\n' +
						"tx = "+panel.transform.matrix.tx + '\r\n'+ "ty = " +panel.transform.matrix.ty + "\r\n";
					
					//Keep different files for square and circle
					
					if(pictureID == "circle.jpg")
					{
						textValuesCircle = textValuesCircle +  "task = " + task + "\r\n" + "Distortion Type = " + distortionType +"\r\n"+
							"pictureID = "+  pictureID + "\r\n" + 
							"Distortion Matrix Values = \r\n" + distortionMatrix 
							+ "Corrected distortion values = \r\n" + distortionCorrection + 
							"Time taken = " + timeTaken.toString() + "\r\n" + "Recognise Pre Correction = " +recognisePreCorrection +"\r\n"
							+ "Recognise Post Correction = " +recognisePostCorrection + "\r\n";
						
					}
					
					if(pictureID == "square.jpg")
					{
						textValuesSquare = textValuesSquare +  "task = " + task + "\r\n" + "Distortion Type = " + distortionType +"\r\n"+
							"pictureID = "+  pictureID + "\r\n" + 
							"Distortion Matrix Values = \r\n" + distortionMatrix 
							+ "Corrected distortion values = \r\n" + distortionCorrection + 
							"Time taken = " + timeTaken.toString() + "\r\n" + "Recognise Pre Correction = " +recognisePreCorrection +"\r\n"
							+ "Recognise Post Correction = " +recognisePostCorrection + "\r\n";
						
					}
					
					xTranslation.value = yTranslation.value = zTranslation.value = 0;		
					xScale.value = 		yScale.value =	zScale.value = 1;
					xRotation.value = yRotation.value = zRotation.value = 0;
					
					
					currentTime = getTimer();
					recognisePreCorrection = "";
					recognisePostCorrection = "";
					
					initProcessing();
				}
			}
			
			public function initProcessing():void {
				/*
				To identify and correct the images using scaling 
				Set different scale values 
				*/
				var matrix:Array = [0.3, 0.59, 0.11, 0, 0,
					0.3, 0.59, 0.11, 0, 0,
					0.3, 0.59, 0.11, 0, 0,
					0, 0, 0, 1, 0];
				
				var image:Image = new Image();
				
				if(countImage ==1)
				{
					[Embed("assets/exp2/snellenxy/sample-17.jpg")]
					
					var img1:Class;
					image.load(img1);
					
					scaleFactorX = 1;
					scaleFactorY = 1
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				
				if(countImage ==2)
				{
					[Embed("assets/circle.jpg")]
					
					var img2:Class;
					image.load(img2);
					
					scaleFactorX = 2;
					scaleFactorY = 1;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				
				if(countImage ==3)
				{
					[Embed("assets/square.jpg")]
					
					var img3:Class;
					image.load(img3);
					
					scaleFactorX = 0.25;
					scaleFactorY = 1;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==4)
				{
					[Embed("assets/square.jpg")]
					
					var img4:Class;
					image.load(img4);
					
					scaleFactorX = 0.25;
					scaleFactorY = 1.5;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==5)
				{
					[Embed("assets/circle.jpg")]
					
					var img5:Class;
					image.load(img5);
					
					scaleFactorX = 2.5;
					scaleFactorY = 1;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==6)
				{
					[Embed("assets/circle.jpg")]
					
					var img6:Class;
					image.load(img6);
					
					scaleFactorX = .5;
					scaleFactorY = 1;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				
				if(countImage ==7)
				{
					[Embed("assets/circle.jpg")]
					
					var img7:Class;
					image.load(img7);
					
					scaleFactorX = 1;
					scaleFactorY = 2.5;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==8)
				{
					[Embed("assets/circle.jpg")]
					
					var img8:Class;
					image.load(img8);
					
					scaleFactorX = 2.5;
					scaleFactorY = .75;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==9)
				{
					[Embed("assets/square.jpg")]
					
					var img9:Class;
					image.load(img9);
					
					scaleFactorX = 1;
					scaleFactorY = 1.5;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==10)
				{
					[Embed("assets/circle.jpg")]
					
					var img10:Class;
					image.load(img10);
					
					scaleFactorX = 1;
					scaleFactorY = 2;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==11)
				{
					[Embed("assets/circle.jpg")]
					
					var img11:Class;
					image.load(img11);
					
					scaleFactorX = 1;
					scaleFactorY = 1.5;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==12)
				{
					[Embed("assets/square.jpg")]
					
					var img12:Class;
					image.load(img12);
					
					scaleFactorX = .5;
					scaleFactorY = 2.5;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==13)
				{
					[Embed("assets/square.jpg")]
					
					var img13:Class;
					image.load(img13);
					
					scaleFactorX = 2;
					scaleFactorY = 1;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==14)
				{
					[Embed("assets/circle.jpg")]
					
					var img14:Class;
					image.load(img14);
					
					scaleFactorX = 1.5;
					scaleFactorY = 1;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==15)
				{
					[Embed("assets/square.jpg")]
					
					var img15:Class;
					image.load(img15);
					
					scaleFactorX = 2.75;
					scaleFactorY = 1;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==16)
				{
					[Embed("assets/square.jpg")]
					
					var img16:Class;
					image.load(img16);
					
					scaleFactorX = 1;
					scaleFactorY = 2.5;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				
				if(countImage ==17)
				{
					[Embed("assets/circle.jpg")]
					
					var img17:Class;
					image.load(img17);
					
					scaleFactorX = 2.75;
					scaleFactorY = 1;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==18)
				{
					[Embed("assets/circle.jpg")]
					
					var img18:Class;
					image.load(img18);
					
					scaleFactorX = 2;
					scaleFactorY = .5;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==19)
				{
					[Embed("assets/circle.jpg")]
					
					var img19:Class;
					image.load(img19);
					
					scaleFactorX = 2.75;
					scaleFactorY = .25;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==20)
				{
					[Embed("assets/square.jpg")]
					
					var img20:Class;
					image.load(img20);
					
					scaleFactorX = 2.5;
					scaleFactorY = 1;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}	
				if(countImage ==21)
				{
					[Embed("assets/circle.jpg")]
					
					var img21:Class;
					image.load(img21);
					
					scaleFactorX = 1;
					scaleFactorY = 2.75;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==22)
				{
					[Embed("assets/circle.jpg")]
					
					var img22:Class;
					image.load(img22);
					
					scaleFactorX = 1;
					scaleFactorY = 2;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==23)
				{
					[Embed("assets/square.jpg")]
					
					var img23:Class;
					image.load(img23);
					
					scaleFactorX = 2.5;
					scaleFactorY = 1;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}	
				if(countImage ==24)
				{
					[Embed("assets/square.jpg")]
					
					var img24:Class;
					image.load(img24);
					
					scaleFactorX = .5;
					scaleFactorY = 2;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}	
				if(countImage ==25)
				{
					[Embed("assets/square.jpg")]
					
					var img25:Class;
					image.load(img25);
					
					scaleFactorX = .25;
					scaleFactorY = 2.5;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}	
				if(countImage ==26)
				{
					[Embed("assets/circle.jpg")]
					
					var img26:Class;
					image.load(img26);
					
					scaleFactorX = 2;
					scaleFactorY = .25;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==27)
				{
					[Embed("assets/square.jpg")]
					
					var img27:Class;
					image.load(img27);
					
					scaleFactorX = 2.5;
					scaleFactorY = 1;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}		
				if(countImage ==28)
				{
					[Embed("assets/circle.jpg")]
					
					var img28:Class;
					image.load(img28);
					
					scaleFactorX = .25;
					scaleFactorY = 2;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				
				if(countImage ==29)
				{
					[Embed("assets/square.jpg")]
					
					var img29:Class;
					image.load(img29);
					
					scaleFactorX = 1;
					scaleFactorY = 2.5;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==30)
				{
					[Embed("assets/square.jpg")]
					
					var img30:Class;
					image.load(img30);
					
					scaleFactorX = 1;
					scaleFactorY = 2.75;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==31)
				{
					[Embed("assets/square.jpg")]
					
					var img31:Class;
					image.load(img31);
					
					scaleFactorX = 1;
					scaleFactorY = .25;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==32)
				{
					[Embed("assets/square.jpg")]
					
					var img32:Class;
					image.load(img32);
					
					scaleFactorX = 1;
					scaleFactorY = 2.5;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==33)
				{
					[Embed("assets/square.jpg")]
					
					var img33:Class;
					image.load(img33);
					
					scaleFactorX = 1;
					scaleFactorY = .5;
					//scaleFactorXY = 1;
					
					task = "sr";
					pictureID = 'square.jpg';
				}
				if(countImage ==34)
				{
					[Embed("assets/circle.jpg")]
					
					var img34:Class;
					image.load(img34);
					
					scaleFactorX = .5;
					scaleFactorY = 1;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==35)
				{
					[Embed("assets/circle.jpg")]
					
					var img35:Class;
					image.load(img35);
					
					scaleFactorX = 1.5;
					scaleFactorY = 1.5;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				if(countImage ==36)
				{
					[Embed("assets/circle.jpg")]
					
					var img36:Class;
					image.load(img36);
					
					scaleFactorX = 1;
					scaleFactorY = 2.5;
					//scaleFactorXY = 2.5;
					
					task = "sr";
					pictureID = 'circle.jpg';
				}
				/* 
				Write functions to draw specified scale image
				*/
				
				var grayscaleFilter:ColorMatrixFilter = new ColorMatrixFilter(matrix);
				image.content.filters = [grayscaleFilter];
				var original:Bitmap = Bitmap(image.content);
				
				var red:Number = 0;
				var green:Number = 0;
				var blue:Number = 0;
				
				var count:Number = 0;
				var pixel:Number;
				
				var bitmap30X30:BitmapData = new BitmapData(30, 30, false, 0X000000);
				
				for (var x:int = 0; x < original.bitmapData.width; x = x+1)
				{
					for (var y:int = 0; y < original.bitmapData.height; y = y+1)
					{
						bitmap30X30.setPixel((x/16)  ,(y/16)   , original.bitmapData.getPixel(x,y));
						
					}
				}
				//copy image 30 X 30 to new 210 X 210 image
				
				//var bitmap210X210:BitmapData = new BitmapData(210, 210, false, 0X000000);
				var bitmap210X210:BitmapData = new BitmapData(480, 480, false, 0X000000);
				var pixelArray:Array = new Array();
				
				for(var h:int =0; h< bitmap30X30.width; h= h+1)
				{
					for(var k:int = 0; k<bitmap30X30.height; k= k+1)
					{
						//store pixel values in array 
						pixelArray.push(bitmap30X30.getPixel(h,k));
					}
				}
				
				// write the pixel values to 210 X 210 image
				// reverse array to get elements first
				pixelArray.reverse();
				
				for(var ii:int =0; ii<bitmap210X210.width; ii= ii+16)
				{
					for(var jj:int = 0; jj<bitmap210X210.height; jj= jj+16)
					{
						var temp:uint = pixelArray.pop();
						bitmap210X210.setPixel(ii,jj,temp);
						bitmap210X210.setPixel(ii+1,jj,temp);
						bitmap210X210.setPixel(ii,jj+1,temp);
						bitmap210X210.setPixel(ii+1,jj+1,temp);
					}
				} 
				
				/*Scale the image accordingly specified in count
				Assign ScaleX and ScaleY values if not initalized earlier
				ScaleX  
				ScaleY
				*/
				
				if((scaleFactorX >= 1) && (scaleFactorY >= 1))
				{
					
					var bitmapScale:BitmapData = new BitmapData((bitmap210X210.width * scaleFactorX),(bitmap210X210.height* scaleFactorY), false, 0X000000);
					for (var x:int = 0; x < bitmapScale.width; x = x+ 1)
					{
						for (var y:int = 0; y < bitmapScale.height; y = y+1)
						{		bitmapScale.setPixel(x * scaleFactorX ,y *scaleFactorY , bitmap210X210.getPixel(x,y));
							bitmapScale.setPixel((x * scaleFactorX) + 1 ,(y *scaleFactorY) , bitmap210X210.getPixel(x,y));
							bitmapScale.setPixel((x * scaleFactorX) ,(y *scaleFactorY)+ 1 , bitmap210X210.getPixel(x,y));
							bitmapScale.setPixel((x * scaleFactorX) + 1 ,(y *scaleFactorY)+ 1 , bitmap210X210.getPixel(x,y));	
						}
					}	
				}
				
				if((scaleFactorX < 1) || (scaleFactorY < 1))
				{
					
					var bitmapScale:BitmapData = new BitmapData((bitmap210X210.width * scaleFactorX),(bitmap210X210.height *scaleFactorY), false, 0X000000);
					for (var x:int = 0; x < bitmapScale.width; x = x+ 1)
					{
						for (var y:int = 0; y < bitmapScale.height; y = y+1)
						{	
							bitmapScale.setPixel(x * scaleFactorX ,(y *scaleFactorY) , bitmap210X210.getPixel(x,y));
							bitmapScale.setPixel((x * scaleFactorX) + 1 ,(y *scaleFactorY) , bitmap210X210.getPixel(x,y));
							bitmapScale.setPixel((x * scaleFactorX) ,(y *scaleFactorY)+ 1 , bitmap210X210.getPixel(x,y));
							bitmapScale.setPixel((x * scaleFactorX) + 1 ,(y *scaleFactorY)+ 1 , bitmap210X210.getPixel(x,y));	
						}
					}	
				}
				
				//display scaled image
				bmp210.bitmapData = bitmapScale;
				// Gaussian blur
				var blur1:BlurFilter = new BlurFilter();
				blur1.blurX = 2;
				blur1.blurY = 2;
				blur1.quality = BitmapFilterQuality.LOW;
				bmp210.filters = [blur1];
				
				panel.x = 400;
				panel.y = 90;
				
				/* panel.scaleX = 1.5;
				panel.scaleY = 1.5;
				*/
				panel.addChild(bmp210);
				
				distortionMatrix = "a = " + panel.transform.matrix.a + '\r\n' + 
					"b = " + panel.transform.matrix.b + '\r\n' + "c = " + panel.transform.matrix.c +'\r\n' +"d = " +panel.transform.matrix.d +'\r\n' +
					"tx = "+panel.transform.matrix.tx + '\r\n'+ "ty = "  +panel.transform.matrix.ty + "\r\n";
				
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="welcomeState"/>
		<s:State name="experimentState"/>
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	
	<s:Label includeIn="welcomeState" top="100" left="400" 
			 text="Simulating Prosthetic Vision with Distortions for &#13;&#009;&#009; Retinal Prosthesis Design"  
			 fontSize="24"/>
	<s:Label includeIn="welcomeState" text="Enter Name" top="195" left="550" />
	
	<s:TextInput includeIn="welcomeState" id="namePerson" top="190" left="630"/>
	<s:Button includeIn="welcomeState" label="Start" top="250" left="630" click="button1_clickHandler(event)"/>
	
	<mx:Image width="480" height="480"
			  id="panel" 
			  rotationX="{ xRotation.value }"
			  rotationY="{ yRotation.value }"
			  rotationZ="{ zRotation.value }"
			  scaleX="{ xScale.value }"
			  scaleY="{ yScale.value }"
			  scaleZ="{ zScale.value }"
			  z="{ zTranslation.value }"  includeIn="experimentState"/>
	
	
	<!--
	Write all controls for correction - Do write in a group, easy to include/exclude
	-->
	<s:Group id="controlsCorrection" includeIn="experimentState" 
			 bottom="50" left="10">
		<s:Label includeIn="experimentState" left="150" text="Controls for correction"
				 fontSize="18"/> 
		
		<mx:HBox top="15">
			<!-- ROTATION --> 
			<mx:VBox
				horizontalAlign="center">
				
				<!-- x-rotation -->
				<mx:Label
					text="x-rotation: { xRotation.value }"
					toolTip="click to reset xRotation to 0"
					click="{ xRotation.value = 0 }" />
				
				<mx:HSlider
					id="xRotation"
					value="0" 
					liveDragging="true"
					snapInterval="1"
					tickInterval="45"
					minimum="{ -_degreeRange }" maximum="{ _degreeRange }" 
					change="invertImage()"/>
				
				<!-- y-rotation -->
				<mx:Label
					text="y-rotation: { yRotation.value }"
					toolTip="click to reset yRotation to 0"
					click="{ yRotation.value = 0 }" />
				
				<mx:HSlider
					id="yRotation"
					value="0" 
					liveDragging="true"
					snapInterval="1"
					tickInterval="45"
					minimum="{ -_degreeRange }" maximum="{ _degreeRange }" 
					change="invertImage()"/>
				
				<!-- z-rotation -->
				<mx:Label
					text="z-rotation: { zRotation.value }"
					toolTip="click to reset zRotation to 0"
					click="{ zRotation.value = 0 }" />
				
				<mx:HSlider
					id="zRotation"
					value="0" 
					liveDragging="true"
					snapInterval="1"
					tickInterval="45"
					minimum="{ -_degreeRange }" maximum="{ _degreeRange }" 
					change="invertImage()"/>
				
			</mx:VBox>
			
			<!-- TRANSLATION -->
			<mx:VBox
				horizontalAlign="center">
				
				<!-- x-translation -->
				<mx:Label
					text="x-translation: { xTranslation.value }"
					toolTip="click to reset xTranslation to center"
					click="{ xTranslation.value = ( this.width - panel.width ) / 2 }" />
				
				<mx:HSlider
					id="xTranslation"
					liveDragging="true"
					snapInterval="1"
					tickInterval="45"
					value="0"
					minimum="-30" maximum="30" 
					change="{panel.x =panel.x+ xTranslation.value}"/>
				
				<!-- y-translation -->
				<mx:Label
					text="y-translation: { yTranslation.value }"
					toolTip="click to reset yTranslation to center"
					click="{ yTranslation.value = ( this.height - panel.height ) / 2 }" />
				
				<mx:HSlider
					id="yTranslation"					 
					liveDragging="true"
					snapInterval="1"
					tickInterval="45"
					value="0"
					minimum="-30" maximum="30" 
					change="{panel.y =panel.y+ yTranslation.value}"/>
				
				<!-- z-translation -->
				<mx:Label
					text="z-translation: { zTranslation.value }"
					toolTip="click to reset zTranslation to 0"
					click="{ zTranslation.value = 0 }" />
				
				<mx:HSlider
					id="zTranslation"
					value="0" 
					liveDragging="true"
					snapInterval="1"
					tickInterval="45"
					minimum="{-30}" maximum="{ 30 }"
					change="{panel.z = panel.z + zTranslation.value}"/>
				
			</mx:VBox>
			
			<!-- SCALE -->
			<mx:VBox
				horizontalAlign="center">
				
				<!-- x-scale -->
				<mx:Label
					text="x-scale: { xScale.value }"
					toolTip="click to reset xScale to 1"
					click="{ xScale.value = 1 }" />
				
				<mx:HSlider
					id="xScale"
					value="1" 
					liveDragging="true"
					snapInterval="0.1"
					tickInterval=".5"
					minimum="0.1" maximum="3" 
					change="invertImage()"/>
				
				<!-- y-scale -->
				<mx:Label
					text="y-scale: { yScale.value }"
					toolTip="click to reset yScale to 1"
					click="{ yScale.value = 1 }" />
				
				<mx:HSlider
					id="yScale"
					value="1" 
					liveDragging="true"
					snapInterval="0.1"
					tickInterval="0.5"
					minimum="0.1" maximum="3" 
					change="invertImage()"/>
				
				<!-- z-scale -->
				<mx:Label
					text="z-scale: { zScale.value }"
					toolTip="click to reset zScale to 1"
					click="{ zScale.value = 1 }" />
				
				<mx:HSlider
					id="zScale"
					value="1" 
					liveDragging="true"
					snapInterval="0.1"
					tickInterval="0.5"
					minimum="0.1" maximum="3" 
					change="invertImage()"/>
			</mx:VBox>
		</mx:HBox>
	</s:Group>
	<!-- 
	button to save all the recorded slider values
	button for moving onto next image
	-->
	<s:Button includeIn="experimentState" label="Save File 1" right="10" bottom="40" id="saveButton" 
			  click="onSaveClick()" enabled="true"/>
	
	<s:Button includeIn="experimentState" label="Save File 2" right="10" bottom="10" id="saveButton2" 
			  click="onSaveClick2()" enabled="true"/>
	
	<s:Button  includeIn="experimentState" label="Next Image" bottom="350" left="250" 
			   click="button2_clickHandler(event)"/>
	<s:Button  includeIn="experimentState" label="Yes" bottom="400" left="200" 
			   click="button3_clickHandler(event)"/>
	<s:Button  includeIn="experimentState" label="No" bottom="400" left="300" 
			   click="button4_clickHandler(event)"/>
	
	
</s:Application>
